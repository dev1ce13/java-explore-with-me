CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(512) NOT NULL,
    CONSTRAINT pk_users PRIMARY KEY (id),
    CONSTRAINT UQ_USERS_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS categories (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    CONSTRAINT pk_categories PRIMARY KEY (id),
    CONSTRAINT UQ_CATEGORIES_NAME UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS events (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    annotation VARCHAR(2000) NOT NULL,
    category_id INTEGER NOT NULL,
    confirmed_requests INTEGER NOT NULL,
    created_on TIMESTAMP NOT NULL,
    description VARCHAR(7000),
    event_date TIMESTAMP NOT NULL,
    initiator_id INTEGER NOT NULL,
    location_lat DOUBLE PRECISION NOT NULL,
    location_lon DOUBLE PRECISION NOT NULL,
    paid BOOLEAN NOT NULL,
    participant_limit INTEGER NOT NULL,
    published_on TIMESTAMP,
    request_moderation BOOLEAN,
    state VARCHAR(20) NOT NULL,
    title VARCHAR(120) NOT NULL,
    views INTEGER,
    CONSTRAINT pk_events PRIMARY KEY (id),
    constraint fk_events_category
        foreign key (category_id) references categories (id) ON UPDATE CASCADE,
    constraint fk_events_initiator
        foreign key (initiator_id) references users (id)
);

CREATE TABLE IF NOT EXISTS compilations (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    pinned BOOLEAN NOT NULL,
    title VARCHAR(100) NOT NULL,
    CONSTRAINT pk_compilations PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS compilations_events (
    compilation_id INTEGER NOT NULL,
    event_id INTEGER NOT NULL,
    constraint fk_compilations_events_event_id
        foreign key (event_id) references events ON UPDATE CASCADE,
    constraint fk_compilations_events_compilation_id
        foreign key (compilation_id) references compilations ON UPDATE CASCADE,
    PRIMARY KEY (compilation_id, event_id)
);

CREATE TABLE IF NOT EXISTS requests (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created TIMESTAMP NOT NULL,
    event_id INTEGER NOT NULL,
    requester_id INTEGER NOT NULL,
    state VARCHAR(20) NOT NULL,
    CONSTRAINT pk_requests PRIMARY KEY (id),
    constraint fk_requests_event foreign key (event_id) references events (id) ON UPDATE CASCADE,
    constraint fk_requests_requester foreign key (requester_id) references users (id)
);